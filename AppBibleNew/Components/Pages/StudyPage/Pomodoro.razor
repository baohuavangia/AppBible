@page "/pomodoro"
@using System.Timers

<div class="container text-center py-4">

    <h2>⏳ Pomodoro Timer</h2>

    <!-- Nút điều khiển -->
    <div class="mb-3">
        <button class="btn btn-primary me-2" @onclick="StartTimer" disabled="@isRunning">Bắt đầu</button>
        <button class="btn btn-warning me-2" @onclick="PauseTimer" disabled="@(!isRunning)">Tạm dừng</button>
        <button class="btn btn-success me-2" @onclick="ResumeTimer" disabled="@(!isPaused)">Tiếp tục</button>
        <button class="btn btn-danger" @onclick="ResetTimer">Đặt lại</button>
    </div>

    <!-- Thông báo khi hết giờ -->
    @if (showAlert)
    {
        <div class="alert alert-info" role="alert">
            ⏰ Hết giờ làm việc! Sẽ chuyển sang nghỉ trong 10 giây...
        </div>
    }

    <!-- Vòng tròn SVG -->
    <div style="width:200px; height:200px; margin:30px auto;">
        <svg width="200" height="200">
            <!-- Vòng nền -->
            <circle cx="100" cy="100" r="90" stroke="#eee" stroke-width="15" fill="none" />
            <!-- Vòng tiến trình -->
            <circle cx="100" cy="100" r="90"
                    stroke="#4caf50"
                    stroke-width="15"
                    fill="none"
                    stroke-dasharray="@circumference"
                    stroke-dashoffset="@dashOffset"
                    stroke-linecap="round"
                    transform="rotate(-90 100 100)" />

            <!-- Nếu chưa chạy thì hiển thị input, nếu đang chạy thì hiển thị thời gian -->
            @if (!isRunning && !isPaused)
            {
                <foreignObject x="40" y="80" width="120" height="40">
                    <div xmlns="http://www.w3.org/1999/xhtml" style="display:flex;justify-content:center;align-items:center;gap:5px;">
                        <input type="number" min="0" max="59" style="width:40px;text-align:center;" @bind="setMinutes" /> :
                        <input type="number" min="0" max="59" style="width:40px;text-align:center;" @bind="setSeconds" />
                    </div>
                </foreignObject>
            }
            else
            {
                <g>
                    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="24">
                        @timeLeft.Minutes.ToString("00"):@timeLeft.Seconds.ToString("00")
                    </text>
                </g>
            }
        </svg>
    </div>

    <div>
        <strong>Trạng thái:</strong> @(isBreak ? "Đang nghỉ" : "Đang làm việc")
    </div>

</div>

@code {
    // Thời gian người dùng đặt
    private int setMinutes = 25;
    private int setSeconds = 0;

    // Thời gian nghỉ mặc định 5 phút
    private int breakMinutes = 5;
    private int breakSeconds = 0;

    private bool isRunning = false;
    private bool isPaused = false;
    private bool isBreak = false;

    private bool showAlert = false;  // hiện thông báo

    private TimeSpan timeLeft;
    private System.Timers.Timer? timer;

    private double circumference = 2 * Math.PI * 90;
    private double dashOffset;

    private void StartTimer()
    {
        if (isRunning) return;

        isRunning = true;
        isPaused = false;
        isBreak = false;
        showAlert = false;

        // Gán thời gian làm việc ban đầu từ input
        timeLeft = new TimeSpan(0, setMinutes, setSeconds);
        dashOffset = 0;

        timer = new System.Timers.Timer(1000);
        timer.Elapsed += OnTick;
        timer.Start();
    }

    private void PauseTimer()
    {
        if (!isRunning) return;
        isRunning = false;
        isPaused = true;
        timer?.Stop();
    }

    private void ResumeTimer()
    {
        if (!isPaused) return;
        isPaused = false;
        isRunning = true;
        timer?.Start();
    }

    private void ResetTimer()
    {
        isRunning = false;
        isPaused = false;
        isBreak = false;
        showAlert = false;
        timer?.Stop();
        timeLeft = new TimeSpan(0, setMinutes, setSeconds);
        dashOffset = 0;
    }

    private async void OnTick(object? sender, ElapsedEventArgs e)
    {
        if (timeLeft.TotalSeconds > 0)
        {
            timeLeft = timeLeft.Subtract(TimeSpan.FromSeconds(1));
            UpdateProgress();
        }
        else
        {
            timer?.Stop();

            if (!isBreak)
            {
                // Hết giờ làm việc → hiển thị thông báo 10s
                showAlert = true;
                await InvokeAsync(StateHasChanged);

                await Task.Delay(10000); // đợi 10s

                showAlert = false;
                isBreak = true;
                timeLeft = new TimeSpan(0, breakMinutes, breakSeconds);
                timer?.Start();
            }
            else
            {
                // Hết giờ nghỉ → quay lại làm việc
                isBreak = false;
                timeLeft = new TimeSpan(0, setMinutes, setSeconds);
                timer?.Start();
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private void UpdateProgress()
    {
        double totalSeconds = isBreak
            ? (breakMinutes * 60 + breakSeconds)
            : (setMinutes * 60 + setSeconds);

        double percent = 1 - (timeLeft.TotalSeconds / totalSeconds);
        dashOffset = circumference * percent;
    }
}
