@page "/note-editor"
@page "/note-editor/{NoteId:int}"
@using AppBibleNew.Model
@using AppBibleNew.Service
@inject NoteService NoteService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>📝 Note Editor</h3>

<div class="border p-2 mb-2 rounded" style="background-color:#fff7d1;">
    <input id="editorInput"
           class="form-control border-0"
           placeholder="Tiêu đề"
           @bind="Current.Title" />
    <hr />
    <div id="editor"
         class="form-control border-0"
         contenteditable="true"
         data-placeholder="Nhập nội dung..."
         @onmouseup="UpdateToolbarState"
         @onkeyup="UpdateToolbarState"
         style="height:50vh; background-color:transparent;">
    </div>
    <hr />
    <div class="btn-group mb-2">
        <button class="btn btn-light @(BoldActive ? "active" : "")" @onclick="Bold"><b>B</b></button>
        <button class="btn btn-light @(ItalicActive ? "active" : "")" @onclick="Italic"><i>I</i></button>
        <button class="btn btn-light @(UnderlineActive ? "active" : "")" @onclick="Underline"><u>U</u></button>
        <button class="btn btn-light @(BulletActive ? "active" : "")" @onclick="Bullet">• List</button>
        <button class="btn btn-light @(NumberActive ? "active" : "")" @onclick="Number">1. List</button>
    </div>
</div>

<button class="btn btn-primary" @onclick="SaveNote">
    @(Current.Id == 0 ? "💾 Lưu" : "💾 Cập nhật")
</button>
<button class="btn btn-secondary ms-2" @onclick="Cancel">↩ Quay lại</button>

<style>
    /* Input tiêu đề */
    #editorInput {
        background-color: transparent;
        padding: 8px;
        outline: none;
        box-shadow: none;
    }

        #editorInput:focus {
            border-color: #ced4da;
            box-shadow: none;
        }

    /* Editor contenteditable */
    #editor {
        min-height: 150px;
        background-color: transparent;
        outline: none;
        padding: 8px;
    }

        #editor:focus {
            box-shadow: none;
            border-color: #ced4da;
        }

        /* Placeholder cho div contenteditable */
        #editor:empty:before {
            content: attr(data-placeholder);
            color: #888;
            pointer-events: none;
        }

    /* Toolbar button */
    .btn-light {
        background-color: white;
    }

        .btn-light:focus {
            box-shadow: none;
        }

        .btn-light.active {
            background-color: #e2e6ea;
        }
</style>

@code {
    [Parameter] public int? NoteId { get; set; }
    private Note Current = new() { CreatedAt = DateTime.Now };
    private bool BoldActive, ItalicActive, UnderlineActive, BulletActive, NumberActive;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && NoteId.HasValue)
        {
            var note = NoteService.GetAll().FirstOrDefault(n => n.Id == NoteId.Value);
            if (note != null)
            {
                Current = new Note
                {
                    Id = note.Id,
                    Title = note.Title,
                    Content = note.Content,
                    CreatedAt = note.CreatedAt
                };

                // Cập nhật nội dung editor
                await JS.InvokeVoidAsync("setEditorContent", Current.Content);

                // Cập nhật state để input hiển thị title
                StateHasChanged();
            }
        }
    }


    async Task SaveNote()
    {
        Current.Content = await JS.InvokeAsync<string>("getEditorContent");
        NoteService.Save(Current);
        Navigation.NavigateTo("/study");
    }

    void Cancel() => Navigation.NavigateTo("/study");

    async Task Bold() => await Format("bold");
    async Task Italic() => await Format("italic");
    async Task Underline() => await Format("underline");
    async Task Bullet() => await Format("insertUnorderedList");
    async Task Number() => await Format("insertOrderedList");

    async Task Format(string cmd)
    {
        await JS.InvokeVoidAsync("formatEditor", cmd);
        await UpdateToolbarState();
    }

    async Task UpdateToolbarState()
    {
        BoldActive = await JS.InvokeAsync<bool>("queryCommandState", "bold");
        ItalicActive = await JS.InvokeAsync<bool>("queryCommandState", "italic");
        UnderlineActive = await JS.InvokeAsync<bool>("queryCommandState", "underline");
        BulletActive = await JS.InvokeAsync<bool>("queryCommandState", "insertUnorderedList");
        NumberActive = await JS.InvokeAsync<bool>("queryCommandState", "insertOrderedList");
        StateHasChanged();
    }
}
