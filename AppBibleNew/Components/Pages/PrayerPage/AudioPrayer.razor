
@using AppBibleNew.Service
@inject AudioService audioService
@using System.Diagnostics;
<style>
    #none-forcus {
        outline: none;
        background-color: transparent;
    }

        #none-forcus:focus {
            box-shadow: none;
        }

    .vertical-slider {
        -webkit-appearance: none;
        width: 50px; /* chiều cao khi xoay */
        height: 5px;
        transform: rotate(-90deg);
        margin-top: 20px;
        background: linear-gradient(to right, #007bff 0%, #007bff calc( @volume * 100%), #ccc calc( @volume * 100%), #ccc 100%);
        border-radius: 4px;
    }

        /* Thumb */
        .vertical-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 10px;
            height: 10px;
            background: #007bff;
            border-radius: 50%;
            cursor: pointer;
            border: none;
        }

        .vertical-slider::-moz-range-thumb {
            width: 10px;
            height: 10px;
            background: #007bff;
            border-radius: 50%;
            cursor: pointer;
            border: none;
        }

    .inputYt {
        border: 0 0 1px 0;
    }

    .custom-input {
        border: none; /* bỏ toàn bộ viền */
        border-bottom: 2px solid black; /* chỉ có viền dưới */
        border-radius: 0; /* bỏ bo góc */
        outline: none; /* bỏ viền khi focus */
        box-shadow: none; /* bỏ bóng mặc định */
    }

        .custom-input:focus {
            border-bottom-color: black; /* đổi màu khi focus nếu muốn */
            box-shadow: none;
            outline: none;
        }

    .tab-content .tab-pane {
        background-color: transparent !important;
    }

    .nav-tabs .nav-link {
        background-color: transparent !important;
        border: none !important;
        color: #000; /* màu chữ */
    }

        .nav-tabs .nav-link.active,
        .nav-tabs .nav-link:focus,
        .nav-tabs .nav-link:active {
            background-color: transparent !important;
            border: none !important;
            color: #000 !important;
            box-shadow: none !important; /* bỏ hiệu ứng focus */
        }

    .nav-tabs {
        border-bottom: 1px solid #ccc; /* gạch chân toàn thanh */
    }

        .nav-tabs .nav-link.active {
            border-bottom: 2px solid #007bff !important; /* chỉ gạch dưới tab đang chọn */
        }

</style>


<div style="width:70%;">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" data-bs-toggle="tab" href="#localTab">Local Music</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#youtubeTab">YouTube</a>
        </li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content mt-3">

        <!-- LOCAL MUSIC TAB -->
        <div class="tab-pane bg-transparent active" id="localTab">
            <div class="border p-3 rounded" style="width:100%">
                <!-- Thanh process -->
                <input style="width:100%;" type="range" min="0" max="@audioService.Duration" step="0.1"
                       value="@audioService.CurrentPosition" @oninput="OnSeek" />
                <div class="text-center small">
                    @TimeSpan.FromSeconds(audioService.CurrentPosition).ToString(@"hh\:mm\:ss")
                    /
                    @TimeSpan.FromSeconds(audioService.Duration).ToString(@"hh\:mm\:ss")
                </div>
                <div class="row">
                    <div class="col-3">
                        <input type="range" min="0" max="1" step="0.01" value="@volume"
                               @oninput="OnVolumeChanged"
                               class="vertical-slider"
                               style="background: linear-gradient(to right, #007bff 0%, #007bff @(volume * 100)%, #ccc @(volume * 100)%, #ccc 100%);" />
                    </div>
                    <div class="col-6">
                        <div class="mt-3 d-flex gap-2 justify-content-center align-items-center">
                            <button class="btn rounded-circle" id="none-forcus" @onclick="Previous">⏮</button>
                            <button class="btn rounded-circle border" id="none-forcus" style="width:4vw;height:4vw;" @onclick="TogglePlayPause">
                                @if (audioService.IsPlaying)
                                {
                                    <span>⏸</span>
                                }
                                else
                                {
                                    <span>▶</span>
                                }
                            </button>
                            <button class="btn rounded-circle" id="none-forcus" @onclick="Next">⏭</button>
                        </div>
                    </div>
                    <div class="col-3">
                        <label>Chọn bài nhạc:</label>
                        <select class="form-select" @onchange="OnSelectAudio">
                            @foreach (var track in localTracks)
                            {
                                <option value="@track.Path">@track.Name</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- YOUTUBE TAB -->
        <div class="tab-pane bg-transparent fade" id="youtubeTab">
            <input type="text"
                   class="form-control custom-input m-2"
                   placeholder="Dán link YouTube..."
                   value="@youtubeUrl"
                   @oninput="OnYoutubeInput" />

            @if (!string.IsNullOrEmpty(youtubeTitle))
            {
                <div class="border rounded p-3" style="width:100%">
                    <div class="row">
                        <h6 class="card-title text-center">@youtubeTitle</h6>
                        <input style="width:100%;" type="range" min="0" max="@audioService.Duration" step="0.1"
                               value="@audioService.CurrentPosition" @oninput="OnSeek" />
                        <div class="text-center small">
                            @TimeSpan.FromSeconds(audioService.CurrentPosition).ToString(@"hh\:mm\:ss")
                            /
                            @TimeSpan.FromSeconds(audioService.Duration).ToString(@"hh\:mm\:ss")
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-3">
                            <input type="range" min="0" max="1" step="0.01" value="@volume"
                                   @oninput="OnVolumeChanged"
                                   class="vertical-slider"
                                   style="background: linear-gradient(to right, #007bff 0%, #007bff @(volume * 100)%, #ccc @(volume * 100)%, #ccc 100%);" />
                        </div>
                        <div class="col-6">
                            <div class="mt-3 d-flex gap-2 justify-content-center align-items-center">
                                <button class="btn rounded-circle" id="none-forcus" @onclick="Previous">⏮</button>
                                <button class="btn rounded-circle border" id="none-forcus"
                                        style="width:4vw;height:4vw;"
                                        @onclick="TogglePlayPauseYoutube">
                                    @if (audioService.IsPlaying)
                                    {
                                        <span>⏸</span>
                                    }
                                    else
                                    {
                                        <span>▶</span>
                                    }
                                </button>
                                <button class="btn rounded-circle " id="none-forcus" @onclick="Next">⏭</button>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="card border-0 shadow-sm">
                                <img src="@youtubeThumbnail" class="card-img-top" alt="Thumbnail" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    double volume = 1.0;
    private System.Timers.Timer? timer;
    private System.Timers.Timer? debounceTimer;
    bool isLocal = true;
    string youtubeUrl = "";
    string youtubeTitle = "";
    string youtubeThumbnail = "";
    TimeSpan youtubeDuration = TimeSpan.Zero;
    class AudioTrack
    {
        public string Name { get; set; } = "";
        public string Path { get; set; } = "";
    }
    List<AudioTrack> localTracks = new();
    protected override void OnInitialized()
    {
        audioService.Stop();

        // Load tất cả file mp3 trong folder wwwroot/audio/audioMusic
        var folder = Path.Combine(Environment.CurrentDirectory, "wwwroot/audio/audioPrayer");
        if (Directory.Exists(folder))
        {
            foreach (var file in Directory.GetFiles(folder, "*.mp3"))
            {
                localTracks.Add(new AudioTrack
                {
                    Name = Path.GetFileName(file),
                    Path = file.Replace(Environment.CurrentDirectory + "\\wwwroot\\", "wwwroot/").Replace("\\", "/")
                });
            }
        }

        // Set playlist
        audioService.SetPlaylist(localTracks.Select(x => x.Path).ToList());

        // Timer update UI
        timer = new System.Timers.Timer(500);
        timer.Elapsed += (s, e) => InvokeAsync(StateHasChanged);
        timer.Start();
    }
    void TogglePlayPause()
    {
        if (audioService.IsPlaying)
            audioService.Pause();
        else
            audioService.Play();
    }
    void TogglePlayPauseYoutube()
    {
        if (audioService.IsPlaying)
            audioService.Pause();
        else
            _ = PlayYoutube(); // gọi async
    }

    void OnSelectAudio(ChangeEventArgs e)
    {
        var selectedPath = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedPath))
        {
            // Tìm index của bài trong playlist
            int index = localTracks.FindIndex(t => t.Path == selectedPath);
            if (index >= 0)
                audioService.Play(index); // 🔹 Dùng index thay vì string
        }
    }
    // Local
    async Task PlayStudySong()
    {
        if (!audioService.IsPlaying)
            audioService.Play();
    }

    void Pause() => audioService.Pause();
    void Stop() => audioService.Stop();
    void Next() => audioService.Next();
    void Previous() => audioService.Previous();

    void OnVolumeChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double v))
        {
            volume = v;
            audioService.SetVolume(v);
        }
    }

    void OnSeek(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var seconds))
            audioService.Seek(seconds);
    }

    // YouTube debounce input
    void OnYoutubeInput(ChangeEventArgs e)
    {
        youtubeUrl = e.Value?.ToString() ?? "";

        debounceTimer?.Stop();
        debounceTimer = new System.Timers.Timer(600); // đợi 600ms
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += async (s, ev) =>
        {
            await InvokeAsync(async () =>
            {
                await LoadYoutubeInfo();
                if (!string.IsNullOrWhiteSpace(youtubeUrl))
                {
                    await PlayYoutube(); // 🚀 autoplay luôn sau khi load info
                }
            });
        };
        debounceTimer.Start();
    }

    async Task LoadYoutubeInfo()
    {
        if (string.IsNullOrWhiteSpace(youtubeUrl))
        {
            youtubeTitle = "";
            youtubeThumbnail = "";
            youtubeDuration = TimeSpan.Zero;
        }
        else
        {
            try
            {
                var info = await audioService.GetYoutubeInfo(youtubeUrl);
                youtubeTitle = info.title;
                youtubeThumbnail = info.thumbnailUrl;
                youtubeDuration = info.duration;
            }
            catch
            {
                youtubeTitle = "";
                youtubeThumbnail = "";
                youtubeDuration = TimeSpan.Zero;
            }
        }
        StateHasChanged();
    }

    async Task PlayYoutube()
    {
        if (string.IsNullOrWhiteSpace(youtubeUrl))
            return;

        if (audioService.IsYoutubeLoaded && audioService.CurrentYoutubeUrl == youtubeUrl)
        {
            audioService.Play(); // resume
        }
        else
        {
            await audioService.SetYoutube(youtubeUrl);
        }
    }

    // Mode
    void OnModeChanged(ChangeEventArgs e)
    {
        isLocal = e.Value?.ToString() == "local";
        youtubeUrl = "";
        audioService.Stop();
    }

    public void Dispose()
    {
        timer?.Stop();
        timer?.Dispose();
        debounceTimer?.Dispose();
    }
}